using System;
using System.Threading;

namespace Tetris {

	public static class Rand {
		//public static Random rng = new Random();
		private static readonly ThreadLocal<Random> rng = new ThreadLocal<Random>(() => new Random());

		public static double[] RandomWeights(double min = ANNSettings.MinBoundary, double max = ANNSettings.MaxBoundary) {
			double[] result = new double[ANNSettings.Dimensions];
			for (int i = 0; i < result.Length; i++) {
				result[i] = rng.Value.NextDouble() * (max - min) + min;
			}
			return result;
		}

		public static double NextDouble() {
			return rng.Value.NextDouble();
		}

		public static int Next(int v) {
			return rng.Value.Next(v);
		}

		public static int Next(int min, int max) {
			return rng.Value.Next(min, max);
		}
	}

	public static class TetrisSettings {
		public const int Height = 20;
		public const int Width = 10;

		public const int Runs = 28;
		public const int Evals = 2000;
		public const bool LimitEvals = false;


		public const bool Verbose = false;
		public const int EvalutaionGames = 10;

		public const int TrainHeight = 16;
		public const int TrainWidth = 8;
		public const int TrainEvaluationGames = 5;
	}

	public static class ANNSettings {
		public const int Input = 16; // Not easily modified: must calculate new features, or remove, to accomodate change
		public const int Hidden = 14;
		public const int MinBoundary = -1;
		public const int MaxBoundary = 1;

		// Don't touch
		public static int Dimensions {
			get {
				return ((Input + 1) * Hidden) + Hidden + 1;
			}
		}

		public static double[] Weights { get; set; } = new double[] {
		-0.196092905364587,
-0.164594409763741,
-0.0831302567922369,
-0.361779567488366,
-0.190893542885422,
0.672639260886582,
0.804342575280155,
-0.434155377104318,
-0.20024768505257,
0.879788907188824,
0.842904522107276,
0.536544741462852,
0.522544853670859,
-0.717397066195063,
-0.750817230226164,
0.502705479159421,
-0.726871743671071,
-0.753038311131491,
-0.0981987189027475,
0.948151063625053,
-0.23092943830827,
-0.757753888303586,
0.732012289451441,
-0.0418427700492124,
-0.311079419049413,
0.344187780158168,
0.162346623921098,
0.463688827898018,
0.404487138324104,
-0.460745945023454,
-0.497250298190101,
-0.879412929375918,
0.280127799734533,
-0.949113306485357,
-1,
-0.74101577128331,
0.948306401073895,
-0.508389053571529,
-0.140162015488869,
-0.726580404275823,
-0.628935031973656,
0.729164982437787,
-0.376684875037421,
-0.763874962433188,
-0.195318910518147,
0.55200024766475,
0.412375464188667,
-0.85904891489396,
-1,
-0.699001638104717,
-0.419696726406683,
-0.462885957736347,
-0.431402240163095,
-0.092745851501654,
0.997958962958981,
-0.207977736640802,
0.208208360143677,
0.804011668841945,
-0.933120585411335,
0.958741720550966,
-0.271017567367483,
0.253077213511834,
0.972007310004908,
0.537950808855074,
-0.2642610377,
0.701924168910319,
-0.458709794052218,
0.387909553860047,
-0.844005503619092,
-1,
0.723323767874259,
0.342277961720652,
-0.77900686872907,
-0.62286698013805,
-0.332656305750092,
0.000604536850286941,
-0.141635421614573,
0.374235044234237,
-0.648040545357976,
0.17507030806108,
-0.462431775790184,
0.0202638995928055,
0.361088588475086,
-0.432706354222153,
-0.134762762607198,
0.457621255085124,
0.542077645122945,
-0.919908419752181,
-0.875624806861028,
0.13816939836511,
-0.919181372539589,
0.950616866327178,
-0.209245867175031,
0.0742334309379726,
0.810411328788748,
0.642087513414252,
0.50989104452643,
-0.741868848533162,
-0.144553691883858,
0.0627518366383164,
-0.0909294036689471,
0.775209379288793,
0.893257771662045,
0.635507515461886,
-0.228503923503917,
0.186158183464181,
0.894453559021677,
0.194887579975132,
-0.730071783871423,
0.902518128573162,
-0.613064123751558,
-0.121342000927672,
0.515846185160729,
-0.0212274687216916,
0.416118573071354,
-0.334414739783115,
0.290039727546884,
0.252275583132283,
-0.281881728848234,
-0.877833315912099,
-0.109110402459796,
0.83600705947541,
0.00163950817735836,
-0.784718692069901,
0.247011951751547,
0.227519630094766,
-0.220254823608295,
1,
-0.259348609081076,
0.0521710520287977,
0.173346069303533,
-0.757445664032104,
0.264000512316823,
-0.695281077743294,
-1,
-0.241131983232974,
0.0626606610895417,
0.325578086543943,
-0.796552805583355,
0.886056601508815,
-0.376909447666021,
0.522943438230406,
0.748353374816732,
0.439835613246213,
-0.27628324240273,
-0.722916364198439,
-0.28355122590803,
0.710201875171718,
0.647792403943342,
-0.13197223101076,
-0.69613929887112,
-0.518705936643101,
-0.931827932564462,
-0.684338779979398,
-0.595646476188647,
0.590254458620489,
-0.548622234595095,
-0.107276911431587,
-0.371197092979524,
-0.219711011253736,
-0.717947004934547,
-0.932493378700944,
-0.485434597579622,
0.375473875148385,
0.813046090633227,
-0.896112587290779,
0.284999161246421,
-0.815856354351561,
0.102751157941184,
-0.674243258386353,
-0.436460715323303,
0.786236317971124,
-0.12298950444076,
-0.0754767972662039,
0.887349068558641,
0.286200958779866,
-0.572475257669754,
0.753516262030234,
-0.631639341804323,
-0.172906371101821,
0.842462093080259,
-0.0831441444155613,
-1,
-0.555240061287051,
-0.671317151307651,
-0.458632992966673,
-0.0854967003907969,
-0.802179889624304,
0.310519128067233,
0.281382267349648,
-0.409720000763935,
0.0967639019719113,
-0.53785159044799,
-0.210095856965277,
0.684046362155689,
-0.801085518430399,
-0.301951151028374,
-0.558478034827149,
0.47396763377838,
-0.538758416179259,
-0.192828046024408,
-0.809902864851349,
-0.318099195751408,
0.393110477081153,
0.354116427865298,
-0.61560133454185,
0.505359045414746,
0.61720355489161,
-0.328069559916886,
-0.255205009717124,
0.697962787558245,
-0.00669699978784807,
0.858169683381569,
0.94935763775337,
-0.265833763896679,
0.660334263674727,
0.77819871478336,
-0.0683931908888711,
-0.310048356586059,
0.172849653045454,
-0.399937613838585,
-0.559575876626383,
0.0835196846553681,
0.474696741501551,
0.615864988581382,
-0.90939679596448,
0.72816523382826,
-0.332218615248963,
-0.267964382338349,
0.665480642762979,
-0.650947551892592,
-0.697244589197972,
-0.630015165372759,
0.811374585189015,
-0.588817484956383,
0.145453267509814,
-0.69824292031035,
0.0442772531711774,
-0.0773641293453894,
-0.0593635531135548,
0.489436847092655,
-0.401538596227523,
-0.494745033563715,
-0.614562859579252,
0.655301935665432,
0.696207917271201,
0.618377876290296,
-0.974259435220995,
0.136151397198509,
-0.914799171741983,
0.823676011922845,
-0.188655003439915,
0.326490571435068
		};
	}

	public static class GASettings {
		public const int InitialPopulation = 30;

		public const int MaxPopulation = 20;

		public enum SelectionMethods {
			RANDOM,
			TOURNAMENT,
			ABSOLUTE
		}
		public const int K  = 2;

		public const SelectionMethods SelectionMethod = SelectionMethods.RANDOM;

		public const SelectionMethods EliminationMethod = SelectionMethods.ABSOLUTE;

		//public const double MutateProbabilityInMutate = 0.5;

		public const int Generations = 1000;

		public const int AddEvery = 3;

		public const double CrossProb = 0.2;

		public const double MutStdDev = 0.1;

		public const double MutProb = 0.1;

	}

	public static class PSOSettings {
		public const double CognitaveCoefficient = 0.6;
		public const double SocialCoefficient = 0.6;
		public const double VelocityWeight = 0.3;

		public enum NeighbourhoodTopologies {
			STAR,
			RING
		}
		public const NeighbourhoodTopologies NeighbourhoodTopology = NeighbourhoodTopologies.RING;

		public const int Particles = 25;
		public const int Iterations = 1000;
	}
}
